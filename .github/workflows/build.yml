name: Build Firmware

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-platformio-
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    # Budowanie wszystkich wariantów
    - name: Build firmware variants
      run: |
        mkdir -p builds/esp8266 builds/esp32
        
        # ESP8266 builds
        for lang in pl en hu ro; do
          echo "Building ESP8266 $lang variant..."
          pio run -e "lang_$lang"
          
          # Kopiowanie plików do odpowiednich lokalizacji
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Release build
            cp .pio/build/lang_$lang/firmware.bin builds/esp8266/firmware-esp8266-$lang.bin
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Beta build
            cp .pio/build/lang_$lang/firmware.bin builds/esp8266/firmware-esp8266-$lang-beta.bin
          else
            # Alfa build
            cp .pio/build/lang_$lang/firmware.bin builds/esp8266/firmware-esp8266-$lang-alfa.bin
          fi
        done
        
        # ESP32 build
        echo "Building ESP32 variant..."
        pio run -e lang_en_32
        
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Release build
          cp .pio/build/lang_en_32/firmware.bin builds/esp32/firmware-esp32-en.bin
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Beta build
          cp .pio/build/lang_en_32/firmware.bin builds/esp32/firmware-esp32-en-beta.bin
        else
          # Alfa build
          cp .pio/build/lang_en_32/firmware.bin builds/esp32/firmware-esp32-en-alfa.bin
        fi

    # Publikowanie alfa/beta buildów
    - name: Upload development builds
      if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: firmware-builds
        path: builds/
        
    # Commit alfa/beta buildów do repozytorium
    - name: Commit development builds
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add builds/
        git commit -m "Update development builds" || echo "No changes to commit"
        git push
        
    # Tworzenie release dla tagów
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          builds/esp8266/firmware-esp8266-*.bin
          builds/esp32/firmware-esp32-*.bin
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Instrukcje użycia:
# 1. Stwórz katalog .github/workflows w głównym katalogu repozytorium
# 2. Umieść ten plik jako build.yml w tym katalogu
# 3. Upewnij się, że masz odpowiednie uprawnienia do repo
# 4. Workflow uruchomi się automatycznie przy:
#    - Push do main (tworzy wersje alfa)
#    - Pull Request do main (tworzy wersje beta)
#    - Push taga zaczynającego się od 'v' (tworzy release)
